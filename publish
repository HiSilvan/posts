#!/usr/bin/env Rscript
library(knitr)

setwd("/Users/qba/Projects/Blog/posts")

# Get the filename given as an argument in the shell.
args = commandArgs(TRUE)
# args = c("./neural_networks_part1/neural_networks_part1.Rmd", "2017-02-21")
path_to_file = args[1]
date = args[2]
filename = strsplit(path_to_file, "/")[[1]]
len <- length(filename)

if (len == 1) {
  file_dir = "."
} else {
  file_dir = paste0(filename[-len], collapse = "/")
}
setwd(file_dir)

filename = filename[len]

# Check that it's a .Rmd file.
if(!grepl(".Rmd", filename)) {
  stop("You must specify a .Rmd file.")
}

# Knit and place in _posts.
# dir = paste0("~/Projects/Blog/jakubglinka.github.io/_posts/", date, "-")
dir = paste0("./", date, "-")
tmp_output = paste0(dir, "temp.md")
output = paste0(dir, sub('.Rmd', '.md', filename))

# knitr options
knitr::opts_chunk$set(echo = TRUE)
post.title <- sub('.Rmd', '', filename)
post.date <- date
fig.path <- paste0("{{ site.url }}/img/", post.date, "-" ,post.title, "-")
knitr::opts_chunk$set(fig.path=fig.path)


knitr::knit(filename, tmp_output)

# remove head
src <- readLines(tmp_output)
hh <- (src == "---") * 1:length(src)
hh <- hh[hh!=0]

hd <- src[hh[1]:hh[2]]

system(paste0("rm ", tmp_output))

######################################

# protect R chunks

src.with_r <- src[(hh[2] + 1):length(src)]
src.no_r <- c()
r.chunks <- list()

inc <- 1
while (inc <= length(src.with_r)) {
  
  line <- src.with_r[inc]
  if (substr(line, 1, 4) == "```r") {
    r.start <- inc
    src.no_r <- c(src.no_r, "r chunk")
    
    end.detected <- FALSE
    while (!end.detected) {
      
      inc <- inc + 1
      line <- src.with_r[inc]
      if (substr(line, 1, 3) == "```") {
         end.detected <- TRUE
         
      }
      
    }
    r.stop <- inc
    
    r.chunks <- c(r.chunks, list(src.with_r[r.start:r.stop]))
    
  } else {
    src.no_r <- c(src.no_r, line)
  }
  inc <- inc + 1
}

######################################

writeLines(text = src.no_r, con = tmp_output)

# compile with MathJax
cmd <- paste0('../../node/node_modules/mathjax-node/bin/page2svg --format "TeX" --img ',
          '"{{ site.url }}/img/', paste0(post.date, "-",post.title),
          '-" < ', tmp_output,' > ', output)

cmd <- paste0('../../node/node_modules/mathjax-node/bin/page2svg --format "TeX" < ', tmp_output,' > ', output)

cat(cmd)
system(cmd)
system(paste0("rm ", tmp_output))
src <- readLines(output, warn = FALSE)

src.no_r <- src
src <- c()

rr <- 1
for (inc in 1:length(src.no_r)) {
  line <- src.no_r[inc]
  if (line == "r chunk") {
    src <- c(src, r.chunks[[rr]])
    rr <- rr + 1
  } else {
    src <- c(src, line)
  }
  
}


src <- lapply(src, function(line) {
  
  line <- stringi::stri_replace_all_fixed(line, "<html>", "")
  line <- stringi::stri_replace_all_fixed(line, "<body>", "")
  line <- stringi::stri_replace_all_fixed(line, "<head>", "")
  line <- stringi::stri_replace_all_fixed(line, "</html>", "")
  line <- stringi::stri_replace_all_fixed(line, "</body>", "")
  line <- stringi::stri_replace_all_fixed(line, "</head>", "")
  line <- stringi::stri_replace_all_fixed(line, "</svg>##", "</svg>\n\n##")
  
  # line <- stringi::stri_replace_all_fixed(line, "</body></html>", "")
  line <- stringi::stri_replace_all_fixed(line, "<!DOCTYPE html>", "")
  # line <- stringi::stri_replace_all_fixed(line, "<html><head>", "")
  # line <- stringi::stri_replace_all_fixed(line, "</head><body>", "")
  line <- stringi::stri_replace_all_fixed(line, "&gt;", ">")
  line <- stringi::stri_replace_all_fixed(line, "&lt;", "<")
  line <- ifelse(substr(line, 1, 10) == "</lower=0>", "", line)
  line <- stringi::stri_replace_all_fixed(line, "</chr>", "")
  line <- stringi::stri_replace_all_fixed(line, "</fctr>", "")
  
  line
})

src <- unlist(src)
ss <- '<head><style id="MathJax_SVG_styles">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax_SVG .MJX-monospace {font-family: monospace}
.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}
.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.mjx-svg-href {fill: blue; stroke: blue}
.MathJax_SVG_LineBox {display: table!important}
.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
</style></head>'
ss <- " "

writeLines(text = c(hd, ss, src), con = output)


# Copy .png files to the images directory.
fromdir = "{{ site.url }}/img"
todir = "~/Projects/Blog/jakubglinka.github.io/img"
todir_posts = "~/Projects/Blog/jakubglinka.github.io/_posts"

pics = list.files(fromdir, ".png")
pics = sapply(pics, function(x) paste(fromdir, x, sep="/"))
file.copy(pics, todir, overwrite = TRUE)

pics = list.files(fromdir, ".gif")
pics = sapply(pics, function(x) paste(fromdir, x, sep="/"))
file.copy(pics, todir, overwrite = TRUE)

pics = list.files(fromdir, ".svg")
pics = sapply(pics, function(x) paste(fromdir, x, sep="/"))
file.copy(pics, todir, overwrite = TRUE)


file.copy(output, todir_posts, overwrite = TRUE)

# clean
# unlink("./{{ site.url }}", recursive = TRUE)

#
#setwd("../jakubglinka.github.io/")
#system("git add --all")
#system(paste0("git commit --m 'posted ",filename,"'"))
#system("git push origin master")
